<?php
	//#==================================================================
	//# Login, password, and authorization function library
	//#------------------------------------------------------------------
	//# Jerry Bowes, jerbowes@yahoo.com
	//#------------------------------------------------------------------
	//# $Source: /home/jbowes/kkk/src/php/include/RCS/auth-inc.phpx,v $
	//# $Id: auth-inc.phpx,v 1.4 2015/08/14 08:08:45 jbowes Exp $
	//#------------------------------------------------------------------
	//# SET EDITOR FOR 4 space TAB stops
	//# :set autoindent tabstop=4 showmatch	 (vi)
	//#==================================================================
	// Generate Password 
	//===================================================================
	function generate_password () {
		$subname = "generate_password";
		$charset = array();
		$bigletters = array();
		$smallvowels = array('a','i','e','o','u');
		$bigvowels = array('A','I','E','O','U');
		$a1 = range('A', 'H');	// Exclude 'I' as ambiguous
		$a2 = range('J', 'N');	// Exclude 'O' as ambiguous
		$a3 = range('P', 'Z');
		$a4 = range('a', 'k');	// Exclude 'l' as ambiguous
		$a5 = range('m', 'n');	// Exclude 'o' as ambiguous
		$a6 = range('p', 'z');
		$a7 = range('2', '9');	// Exclude '1', '0' as ambiguous
		$a8 = array('.', ',', '@', '_');
		$charset = array_merge($a1,$a2,$a3,$a4,$a5,$a6,$a7,$a8);
	
		$max = count($charset);
		$max--;
	
		$NotFirst = array (
		"."	=>	"1",
		","	=>	"1",
		";"	=>	"1",
		"@"	=>	"1"
		);
	
		$phonetic = array (
		'"'	=>		"DoubleQuote",
		"'"	=>		"SingleQuote",
		"_"	=>		"UnderScore",
		"*"	=>		"Asterix",
		"%"	=>		"PercentSign",
		"@"	=>		"AtSign",
		"+"	=>		"PlusSign",
		"="	=>		"EqualsSign",
		"!"	=>		"ExclamationMark",
		","	=>		"Comma",
		"."	=>		"Period",
		"1"	=>		"One",
		"2"	=>		"Two",
		"3"	=>		"Three",
		"4"	=>		"Four",
		"5"	=>		"Five",
		"6"	=>		"Six",
		"7"	=>		"Seven",
		"8"	=>		"Eight",
		"9"	=>		"Nine",
		":"	=>		"Colon",
		";"	=>		"Semicolon",
		"?"	=>		"QuestionMark",
		"A"	=>		"ALPHA",
		"B"	=>		"BRAVO",
		"C"	=>		"CHARLIE",
		"D"	=>		"DELTA",
		"E"	=>		"ECHO",
		"F"	=>		"FOXTROT",
		"G"	=>		"GOLF",
		"H"	=>		"HOTEL",
		"I"	=>		"INDIA",
		"J"	=>		"JULIET",
		"K"	=>		"KILO",
		"L"	=>		"LIMA",
		"M"	=>		"MIKE",
		"N"	=>		"NANCY",
		"O"	=>		"OSCAR",
		"P"	=>		"PAPA",
		"Q"	=>		"QUEBEC",
		"R"	=>		"ROMEO",
		"S"	=>		"SIERRA",
		"T"	=>		"TANGO",
		"U"	=>		"UNIFORM",
		"V"	=>		"VICTOR",
		"W"	=>		"WHISKEY",
		"X"	=>		"XRAY",
		"Y"	=>		"YANKEE",
		"Z"	=>		"ZULU",
		"a"	=>		"alpha",
		"b"	=>		"bravo",
		"c"	=>		"charlie",
		"d"	=>		"delta",
		"e"	=>		"echo",
		"f"	=>		"foxtrot",
		"g"	=>		"golf",
		"h"	=>		"hotel",
		"i"	=>		"india",
		"j"	=>		"juliet",
		"k"	=>		"kilo",
		"l"	=>		"lima",
		"m"	=>		"mike",
		"n"	=>		"nancy",
		"o"	=>		"oscar",
		"p"	=>		"papa",
		"q"	=>		"quebec",
		"r"	=>		"romeo",
		"s"	=>		"sierra",
		"t"	=>		"tango",
		"u"	=>		"uniform",
		"v"	=>		"victor",
		"w"	=>		"whiskey",
		"x"	=>		"xray",
		"y"	=>		"yankee",
		"z"	=>		"zulu",
		"~"	=>		"Tilde"
		);
	
		$pw = '';			// Raw Password
		$phon = array();	// Phonetic
		$length = strlen($pw);
    	for ($i =0; $length < 8; $i++) {
			$idx = rand(0, $max );
			$thischar = $charset[$idx];
			if (empty($pw)) {
				if ( empty($NotFirst[$thischar] )) {
					$pw .= $thischar;
					array_push($phon , $phonetic[$thischar]);
				}
			}else{
				$pw .= $thischar;
				array_push($phon ,$phonetic[$thischar]);
			}
			$length = strlen($pw);
    	}
		$phonout = implode('-', $phon);
		return array($pw, $phonout);
	}#Endif generate_password
	//===================================================================
	// Is Authorized
	// Given group name, return array of authorization roles
	// $level is legacy that yields array value of 'Level' if >
	//===================================================================
	function get_access_group_auth ($groupid,$level) {

		// Not logged in? No Access. Return
		$pid = $_SESSION['people_id'];
		if ( ! isset ($pid) ) {
			return;
		}
		if ( ! isset ($groupid) ) {
			echo "<p class=trace>ERROR: get_access_group_auth function requires access_group_id as first parameter</P>\n";
			return;
		}

		kkk_pdo_connect();
		$AuthList = array();
		$today = date('Y-m-d');

		$where = array(
			"access_group_id = '$groupid'",
			"warrior_id = '$pid'"
		);

		$sql = "SELECT group_role FROM access_roster";

		if (! empty ($context)) {
			$where['context'] = $context;
		}

		$sql .= ' WHERE ' . implode(' AND ', $where);

		print "<P class=trace>$sql</P>\n";// DEVONLY

		$AuthList = get_menu($sql);

		//										// LEGACY
		// Legacy access level support			// LEGACY
		//										// LEGACY
		if ( $_SESSION['access'] > $level ) {	// LEGACY
			$AuthList[] = 'Level';				// LEGACY
			$AuthList[] = 'Editor';				// LEGACY
			$AuthList[] = 'Admin';				// LEGACY
		}										// LEGACY

		return($AuthList);
	}

