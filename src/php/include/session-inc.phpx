<?php
	//#==================================================================
	//# Session Management 
	//#------------------------------------------------------------------
	//# Jerry Bowes, jerbowes@yahoo.com
	//#------------------------------------------------------------------
	//# $Source: /home/jbowes/kkk/src/php/include/RCS/session-inc.phpx,v $
	//# $Id: session-inc.phpx,v 1.21 2015/08/16 15:57:09 jbowes Exp $
	//#------------------------------------------------------------------
	//# SET EDITOR FOR 4 space TAB stops
	//# :set autoindent tabstop=4 showmatch	 (vi)
	//#==================================================================
	require_once('msutils-inc.phpx');
    require_once('config-inc.phpx');
    require_once('auth-inc.phpx');

	//------------------------------------------------------------------
	// Function kkk_session_start
	//------------------------------------------------------------------
	function kkk_session_start($people_id) {
		$me = "session-inc.phpx";
		global $KKKCFG;
		$trace = $me;
		$trace .= "<BR>Enter with pid of $people_id";	// DEVONLY DEBUG

		if (session_status() !== PHP_SESSION_ACTIVE) {session_start();}
		$trace .= '<BR>' . session_save_path();

		//
		// Verify valid people_id
		//
		if (! is_numeric($people_id) ) {
			die("Attempted to run kkk_session_start with non-numeric people_id in $me");
		}

		//
		// Do Database lookups for everything to stuff into session
		//
		$dbh = kkk_pdo_connect();

		//---------------------------------------------------
		// People Table
		//---------------------------------------------------
		//
		$PeopleGetList = array(
			'people_id',
			'first_name', 
			'last_name', 
			'nickname', 
			'organization_id', 
			'email_1'
		);

		$sql = "SELECT ";
		$sql .= implode(',', $PeopleGetList);
		$sql .= " FROM people WHERE people_id = '$people_id'";
		$trace .= "<P class=trace>$sql</P>\n"; // DEBUG DEVONLY
		$result = $dbh->query($sql);
		$num = $result->rowCount();
		$trace .= "<P class=trace>Returned $num records</P>\n"; // DEBUG DEVONLY
		$People = array();

        $People = $result->fetch(PDO::FETCH_ASSOC) ;
		foreach ($People as $var => $val) {
			$trace .= "<BR> $var is $val";	// DEBUG DEVONLY
			if (! empty($val) ) {
				$_SESSION[$var] = $val;
				$trace .= "<BR> Setting Session variable $var to $val";	// DEBUG DEVONLY
			}
		}
		//---------------------------------------------------
		// Security access table
		//---------------------------------------------------
		//
		$AccessList = array(
			'access_level',
			'access_role', 
			'access_class', 
		);

		$sql = "SELECT ";
		$sql .= implode(',', $AccessList);
		$sql .= " FROM access WHERE people_id = '$people_id'";
		$trace .= "<P class=trace>$sql</P>\n"; // DEBUG DEVONLY
		$result = $dbh->query($sql);
		$num = $result->rowCount();
		$trace .= "<P class=trace>Access Returned $num records</P>\n"; // DEBUG DEVONLY
		$Access = array();
        $Access = $result->fetch(PDO::FETCH_ASSOC) ;
		foreach ($Access as $var => $val) {
			$trace .= "<BR> $var is $val";	// DEBUG DEVONLY
			if (! empty($val) ) {
				$_SESSION[$var] = $val;
				$trace .= "<BR> Setting Session variable $var to $val";	// DEBUG DEVONLY
			}
		}


		//
		//---------------------------------------------------
		// Commit Session
		//---------------------------------------------------
		//
		session_write_close();

		return($trace);
	}
	//------------------------------------------------------------------
	// Function kkk_session_end
	//------------------------------------------------------------------
	function kkk_session_end() {
		session_start();
		// Unset all of the session variables.
		$_SESSION = array();

		// If it's desired to kill the session, also delete the session cookie.
		// Note: This will destroy the session, and not just the session data!
		if (ini_get("session.use_cookies")) {
    		$params = session_get_cookie_params();
    		setcookie(session_name(), '', time() - 42000,
        		$params["path"], $params["domain"],
        		$params["secure"], $params["httponly"]
    		);
		}
		session_destroy();
	}
?>
