<?php
	//#==================================================================
	//# LAMP PHP Template, Docroot
	//# Jerry Bowes, jerbowes@yahoo.com
	//#------------------------------------------------------------------
	//# $Source: /home/jbowes/kkk/src/php/root/RCS/program.phpx,v $
	//# $Id: program.phpx,v 1.1 2015/08/30 15:55:48 jbowes Exp $
	//#------------------------------------------------------------------
	//# SET EDITOR FOR 4 space TAB stops
	//# :set autoindent tabstop=4 showmatch	 (vi)
	//#==================================================================

	require_once("./include/auth-inc.phpx");
	require_once("./include/config-inc.phpx");
	require_once("./include/looknfeel-inc.phpx");
	require_once("./include/msutils-inc.phpx");
	require_once("./include/session-inc.phpx");

	//--------------------------------------------------------------------------
	// If you are not authenticated (no people_id in $_SESSION), 
	// Construct return url and redirect to login for authentication
	//--------------------------------------------------------------------------
	//
	global $KKKCFG;
	if (session_status() !== PHP_SESSION_ACTIVE) {session_start();}

	if ( ! isset ( $_SESSION['people_id'] )) {
		if (array_key_exists('QUERY_STRING', $_SERVER)){
			$param = preg_replace('/&/', '|', $_SERVER['QUERY_STRING'] );
			$returl =  $_SERVER['PHP_SELF'] . '?' .  $param;
			header("Location: $KKKCFG[BASEURL]/login.phpx?RetUrl=$returl");;
		}else{
			$returl =  $_SERVER['PHP_SELF'];
			header("Location: $KKKCFG[BASEURL]/login.phpx?RetUrl=$returl");;
		}
		exit;
	}

	//------------------------------------------------------------------------
	// Formatting and navbar options for looknfeel-inc header and footer functions
	//------------------------------------------------------------------------
	//
	$FMT = array (
		'BANNER'		=>	"Programs",
		'TITLE'			=>	"Programs",
		'MODULENAME'	=>	"program.phpx",
		'NAV1'			=>	"INFO"	// Level 1 menu navigation group
	);

	//------------------------------------------------------------------------
	// Local configuration paremeters
	//------------------------------------------------------------------------
	$PROGRAMCFG = array (
		'EDITLEVEL'		=>	'1'			// Access level to get edit screen
	);

	//------------------------------------------------------------------------
	// Database Fields
	//------------------------------------------------------------------------
	$ALLFIELD = array(
		'program_id',
		'program_name',
		'program_type',
		'program_tag',
		'owner_id',
		'program_status',
		'program_url',
		'program_summary',
		'program_description'
	);

	//
	//	Fields visible in query output list
	//
	$SHOW = array(
		'program_name',
		'program_type',
		'program_tag',
		'owner_id',
		'program_status',
		'program_summary'
	);

	//
	// Fields that can have query drill down links on display
	//
	$LINK = array(
		'program_type',
		'program_tag',
		'owner_id',
		'program_status'
	);
	//
	// Fields that are from a Menu Picklist that can have new members
	//
	$EXTEND = array(
	);

	//
	// Required for New Entry
	//
	$RequiredField = array(
		'program_id',
		'program_name',
		'program_type',
		'program_tag',
		'owner_id',
		'program_status',
		'program_url',
		'program_summary',
		'program_description'
	);
	//
	// Global query choices
	//
	$InValidChoice = array(
		'All',
		'',
		' ',
		'None',
		'Choose'
	);
	//
	// Edit record fields with edit disabled
	//
	$NoEdit = array(
		'program_id'
	);

	$FieldType = array(
		'program_name'		=>	'LongText',
		'program_type'		=>	'Menu',
		'owner_id'			=>	'Who',
		'program_status'	=>	'Menu',
		'program_url'		=>	'LongText',
		'program_summary'	=>	'LongText',
		'program_description'	=> 	'TextArea'
	);

	$BASE = "SELECT choice FROM menu WHERE table_name = 'program' AND ";
	$Menu = array(
		"program_type"		=> "$BASE field_name = 'program_type'",
		"program_status"	=> "$BASE field_name = 'program_status'"
	);

	//
	// Display exceptions from default tdcs centered display table cell
	//
	$JustifyCss = array(
		'program_summary'		=>	'tds',	// small left justified
		'program_name'		=>	'tds'	// small left justified
	);

	//------------------------------------------------------------------------
	// BEGIN Program
	//------------------------------------------------------------------------

	spew_header($FMT);
	if (array_key_exists(Action, $_REQUEST)) {

		echo "<PRE>\n";		// DEVONLY
		print_r($_REQUEST);	// DEVONLY
		echo "</PRE>\n";	// DEVONLY

		spew_query_form();

		//----------------------------------------------------------------------
	  	// Insert New Entry
		//----------------------------------------------------------------------
	  	if ($_REQUEST['Action'] == "Insert New Entry" ) {
			$dbh = kkk_pdo_connect();
			//
			// Get list of fields for this table
			//
			$fieldlabel = get_field_labels('program','program',$KKKCFG['DBNAME']);
			$fields = array_keys($fieldlabel);

			// Define default values
			$Default = array (
				'program_state'	 =>  'New'
			);


			// Setup default values
			foreach ($Default as $key => $val ) {
				if ( ! isset ( $_REQUEST[$key]) ) {
					$_REQUEST[$key] = $val;
				}
			}

			//
			// Eliminate all keys that have invalid answers
			//
			foreach ($fields as $f) {
				$altkey = "NEW_" . $f;
				if (in_array($_REQUEST[$f], $InValidChoice)) {
					unset ($_REQUEST[$f]);
				}
				if (in_array($_REQUEST[$altkey], $InValidChoice)) {
					unset ($_REQUEST[$altkey]);
				}
			}

			//
			// Delete auto_increment primary keys
			//
			unset ($_REQUEST['program_id']);

			//
			// Requred fields gauntlet
			//
			foreach ($RequiredField as $key => $val) {
				if (! array_key_exists($key, $_REQUEST)) {
					$err .= '<LI>Please ' . $RequiredField[$key] . '.</LI>';
				}
			}
			if ( $err ) {

				echo "<CENTER>\n";
				echo "<H3>Incomplete Information</H3>\n";
				echo "<TABLE BORDER>\n";
				echo "<TR><TD><UL>$err</UL></TD></TABLE>\n";
				echo "</TABLE>\n";
				echo "</CENTER>\n";
				spew_footer($FMT);
				exit;
			}

			$sql = 'INSERT INTO program (';
			foreach ($fields as $f) {
				if ( array_key_exists($f, $_REQUEST)) {
					$sql .= $f . ',';
				}
			}
			foreach ($fields as $f) {
				if ( array_key_exists($f, $_REQUEST)) {
					$val = $dbh->quote($_REQUEST[$f]);
					$sql2 .=  $val . ',';
				}
			}

			$finalsql = rtrim($sql, ",") .  ') VALUES (' .  rtrim($sql2, ",") . ")";
			echo "<p class=trace>$finalsql</p>\n";	//DEBUG DEVONLY
			$result = $dbh->query($finalsql);

            $_REQUEST['program_id'] = $dbh->lastInsertId() ;
            $_REQUEST['Action'] = 'View';
            echo "<P class=trace>Returned Program ID of $_REQUEST[program_id]\n";    // DEVONLY


			echo "<CENTER>\n";
			echo "<H2>Record successfully added</H2>\n";
			echo "</CENTER>\n";
		}

		//----------------------------------------------------------------------
	  	// Update Existing Entry 
		//----------------------------------------------------------------------
	  	if ($_REQUEST['Action'] == "Update" ) {

			if ( array_key_exists('program_id', $_REQUEST)) {
				$program_id = $_REQUEST['program_id'];
				if (! is_numeric( $program_id ) ) {
					die ("ERROR: Attempt to update Program requires program_id to be integer. It is not.");
				}
			}else{
				die ("No Program Id Set") ;
			}

			$dbh = kkk_pdo_connect();

			//
			// Get Original Record
			//
			$Original = array();
			$sql = "SELECT * FROM program WHERE program_id = '$program_id'";
			$result = $dbh->query($sql);

			$Original = $result->fetch(PDO::FETCH_ASSOC);


			//
			// Get list of fields for this table
			//
			$fieldlabel = get_field_labels('program','aaaaaaaaaa',$KKKCFG['DBNAME']);

			print '<pre>';						// DEBUG DEVONLY
			echo "Incoming Updated Fields\n";   // DEBUG DEVONLY
			print htmlspecialchars(print_r($fieldlabel), ENT_QUOTES);	// DEBUG DEVONLY
			print '</pre>';						// DEBUG DEVONLY

			$fields = array_keys($fieldlabel);

			//
			// Eliminate all keys that have invalid answers
			//
			foreach ($fields as $f) {
				$altkey = "NEW_" . $f;
				if (in_array($_REQUEST[$f], $InValidChoice)) {
					unset ($_REQUEST[$f]);
				}
				if (in_array($_REQUEST[$altkey], $InValidChoice)) {
					unset ($_REQUEST[$altkey]);
				}
			}

			//
			// Find the extended entries for picklists and return 
			// them to base names, overwriting picklist entry
			//
			foreach ($fields as $f) {
				$altkey = "NEW_" . $f;
				if (array_key_exists($altkey, $_REQUEST)) {
					$_REQUEST[$f] =  $_REQUEST[$altkey];
					unset ($_REQUEST[$altkey]);
				}
			}

			//
			// Update only the fields that have changed
			//
			$sql = 'UPDATE program SET ';
			$sqlentry = array ();
			foreach ($fields as $f) {
				if ( array_key_exists($f, $_REQUEST)) {
					$val = $_REQUEST[$f];
					echo "<BR>$f : Comparing Orig ( $Original[$f] ) with Update ( $_REQUEST[$f] ) \n"; // DEVONLY

					if ( $_REQUEST[$f] != $Original[$f] ) {
						echo "<BR>XXX Different\n"; // DEVONLY
						$val = $dbh->quote($_REQUEST[$f]);
						$sqlentry[] = $f . " = " . $val ;
					}else{
						echo "<BR>YYY Same\n"; // DEVONLY
					}
				}
			}
			$sql .= implode (', ', $sqlentry);
			$sql .= " WHERE program_id = '$program_id'";

			echo "<p class=trace>$sql</p>\n";	// DEVONLY DEBUG

			if (count($sqlentry)) {
				$result = $dbh->query($sql);
				echo "<H3>Update successful</H3>\n";
			}else{
				echo "<H3>No Changes Made</H3>\n";
			}

			$_REQUEST['Action'] = "View";
		}

		//----------------------------------------------------------------------
	  	// Query or List
		//----------------------------------------------------------------------
	  	if ($_REQUEST['Action'] == "Query"
	  		|| $_REQUEST['Action'] == "List" ) {

			$dbh = kkk_pdo_connect();
			$fieldlabel = array();

			$fieldlabel = get_field_labels('program','program',$KKKCFG['DBNAME']);
			$fields = array_keys($fieldlabel);

			//----------------------------------------------------------
			// Capture previous selection criteria and append to links
			// To enable drill down subqueries
			//----------------------------------------------------------

			foreach(explode( '&', $_SERVER[QUERY_STRING])  as $entry ) {
				list($key, $val) = explode( '=', $entry);	

				if ( ! empty( $val ) ) {
					if (! in_array($val, $InValidChoice)) {
						if (in_array($key, $ALLFIELD) ) {
							$parameters[$key] = $val;
						}
					}
				}
			}
			$parameters['Action'] = $_REQUEST['Action'];

			//----------------------------------------------------------
			// Uniquify for duplicate entries
			//----------------------------------------------------------
			$validentries = array();

			foreach ($parameters as $key => $val ) {
				$val = preg_replace('/\s+/', '+', $val);
				$validentries[] = $key . '=' . $val;
			}

			if (count($validentries)) {
				$drilldown = implode('&', $validentries);
			}
			//----------------------------------------------------------
			// Create People lookup array
			//----------------------------------------------------------
			$People = array();
			$PeopleEmailUrl = array();
			$PeopleUrl = array();
			$sql = "SELECT people_id, first_name, last_name, email_1 from people";
			// TODO: limit scope: $sql .= " WHERE ....";
			$result = $dbh->query($sql);
			while ($row = $result->fetch(PDO::FETCH_ASSOC)){
				$pid = $row['people_id'];
				$fullname = $row['first_name'] . " " . $row['last_name'];
				$People[$pid] = $fullname;
				$PeopleEmailUrl[$pid] = '<A HREF=mailto:' . $row['email_1'] . '>' .  $row['email_1'] . '</A>';
				$PeopleUrl[$pid] = '<A HREF=mailto:' . $row['email_1'] . '>' .  $fullname . '</A>';
			}

			// Blurb

			//----------------------------------------------------------
			// Contstruct Query
			//----------------------------------------------------------
			//
			// Base sql query
			//
			$What = array(
				'g.*'
			);
			$Where = array(
			);
			$From = array(
				'program'	=>	'g'
			);

			//
			// Construct where clause into an array
			//
			foreach ($fields as $f) {
				if (array_key_exists($f, $_REQUEST)) { 
					$val = $_REQUEST[$f];

					if (in_array($val, $InValidChoice)){
						unset($val) ;
                    }else{
					    $val = $dbh->quote($_REQUEST[$f]);
						if ( preg_match('/%/', $val)) { 
							$Where[] = 'g.' . $f . " LIKE " . $val ;
						}else{
							$Where[] =  'g.' .$f . "=" . $val ;
						}
					}
				}
			}

			$sql = "SELECT DISTINCT " . implode(',', $What);

			$Fromsql = array();

			foreach ($From as $table => $abbr) {
				$Fromsql[] = $table . ' ' . $abbr;
			}
			$Fromsql = array_unique($Fromsql);

			$sql .= ' FROM ' . implode(', ', $Fromsql);

			if ( count($Where) ) {
				$sql .= ' WHERE ' . implode(' AND ', $Where);
			}

			//---------------------------------------------------
			// ORDER BY
			//---------------------------------------------------
			$OrderBy = array(
				'Name'		=>	'g.program_name',
				'Type'		=>	'g.program_type, g.program_name'
			);

			$sortby = $_REQUEST['Sortmeby'];
			$sby = $OrderBy[$sortby];

			if (empty ($sby)){
				$sql .= ' ORDER BY program_name';
			}else{
				$sql .= ' ORDER BY ' . $sby;
			}

			echo "<P class=trace>$sql</P>\n";	// DEVONLY
			$result = $dbh->query($sql);

			// Blurb
			echo "<P class=trace>\n";
			echo "Column entries that are links will &quot;drill down&quot; to refine your query.\n";
			echo "</P>\n";

			echo "<CENTER>\n";
			echo "<TABLE BORDER>\n";

			if ($_SESSION['access'] >= $PROGRAMCFG['EDITLEVEL'] ) {
				echo "<TH class=ths>Edit</TH>\n";		// SECURITY
			}

			echo "<TH class=ths>View</TH>\n";

			unset($fields[program_id]);

			foreach ($ALLFIELD as $f) {
				if (in_array($f, $SHOW)) {
					echo "<TH class=ths>$fieldlabel[$f]</TH>\n";
				}
			}


			while ($row = $result->fetch(PDO::FETCH_ASSOC)){
				echo "<TR>\n";

				// Edit if authorized
				// SECURITY
				if ($_SESSION['access'] >= $PROGRAMCFG['EDITLEVEL'] ) {	
					echo "<TD ALIGN=CENTER VALIGN=TOP class=tdcs>";
					echo "<A HREF=$_SERVER[PHP_SELF]?program_id=$row[program_id]";
					echo "&Action=Edit>";
					echo "<IMG SRC=/images/smallballs/greenball.gif BORDER=0></A>";
					echo "</TD>\n";
				}
	
				// View for everyone
				echo "<TD ALIGN=CENTER VALIGN=TOP class=tdcs>";
					echo "<A HREF=$_SERVER[PHP_SELF]?program_id=$row[program_id]";
					echo "&Action=View>";
					echo "<IMG SRC=/images/smallballs/yellowball.gif BORDER=0></A>";
				echo "</TD>\n";
	
				foreach ($ALLFIELD as $f) {
					$css = "tdcs";
					$display = stripslashes($row[$f]); 

					// Display Exceptions (lookup)
					if ( $f  == 'program_id' ) {
						$display = $row[program_name];
					}
					if ( $f  == 'owner_id' ) {
						$oid = $row[$f];
						$display = $People[$oid];
					}

					if (in_array($f, $SHOW)) {

						if (array_key_exists($f, $JustifyCss)) {
							$css = $JustifyCss[$f];
						}

						echo "<TD VALIGN=TOP class=$css>";
						if (in_array($f, $LINK)) {
							echo "<A HREF=";
							echo "$_SERVER[PHP_SELF]";
							echo '?';
							$url = preg_replace('/\s+/', '+', $row[$f]);
							echo "$f=${url}"; 
							echo "&${drilldown}>";
							echo "$display</A>\n";
						}else{
							echo "$display\n";
						}
						echo "<BR></TD>\n";
					}
				}
			}
			echo "</TABLE>\n";
			echo "</CENTER>\n";
	  	}//if ($_REQUEST['Action'] == "List"))  or 'Query'

		//----------------------------------------------------------------------
	  	// New Entry Form
		//----------------------------------------------------------------------
	  	if ($_REQUEST['Action'] == "New" ) {
			$menulist = array();
			$table = 'program';

			$dbh = kkk_pdo_connect();
			//
			// People Rosterselect 
			//
			$People = array();
			$PeopleEmail = array();
			$sql = "SELECT people_id, first_name, last_name, email_1 from people";
			// TODO: limit scope: $sql .= " WHERE ....";
			$result = $dbh->query($sql);
			while ($row = $result->fetch(PDO::FETCH_ASSOC)){
				$pid = $row['people_id'];
				$People[$pid] = $row['first_name'] . " " . $row['last_name'];
				$PeopleEmail[$pid] = $row['email_1'];
			}

			// Blurb
			echo "<P class=trace>\n";
			echo "Enter entries. Details on meanings and choice details available via help links in left column.\n";
			echo "</P>\n";



			echo "<CENTER>\n";
			echo "<FORM ACTION=$_SERVER[PHP_SELF] TYPE=POST>\n";
			echo "<TABLE BORDER>\n";

			$fieldlabel = get_field_labels('program','program',$KKKCFG['DBNAME']);


			foreach ($ALLFIELD as $fieldname ) {
			    if ( $fieldname == 'program_id'){
                    continue;
                }
				$val = $fieldlabel[$fieldname];
				
				echo "<TR>\n";

                echo "<TD CLASS=tdls>";
				echo "<A HREF=/help.phpx?source_table=$table&field_name=$fieldname&Action=Help>";
				echo "$val</A></TD>\n";

				echo "<TD class=tds>";

				if (array_key_exists($fieldname, $FieldType)) {
					if ( $FieldType[$fieldname] == "Menu" ) {
						$menusql = $Menu[$fieldname];
						$menulist = get_menu($menusql);
						sort($menulist);
						spew_select_menu($fieldname, $_REQUEST[$fieldname],'',$menulist);
						if (in_array($fieldname, $EXTEND)) {
							echo "-OR- <INPUT TYPE=TEXT NAME=NEW_${fieldname}>";
						}
					}

					if ($FieldType[$fieldname] == "MenuArray" ) {
						$menusql = $Menu[$fieldname];
						$menulist = get_menu_array($menusql);
						asort($menulist);
						spew_select_hash_menu($fieldname, $_REQUEST[$fieldname],'',$menulist);
					}

					if ($FieldType[$fieldname] == "TextArea" ) {
						echo "<TEXTAREA COLS=70 ROWS=20 NAME=$fieldname></TEXTAREA>\n";
					}

					if ($FieldType[$fieldname] == "LongText" ) {
						echo "<INPUT TYPE=TEXT SIZE=70 NAME=$fieldname>";
					}

					if ($FieldType[$fieldname] == "People" ) {
						spew_select_menu($fieldname, $_REQUEST[$fieldname],'',$People);
					}

				}else{
					echo "<INPUT TYPE=TEXT NAME=$fieldname>";
				}
				echo "</TD>\n";
			}
			echo "</TABLE>\n";
			echo "<INPUT TYPE=SUBMIT NAME=Action VALUE=\"Insert New Entry\">\n";
			echo "</FORM>\n";
			echo "</CENTER>\n";
		}//End if ($_REQUEST['Action'] == "New" ) 

		//----------------------------------------------------------------------
	  	// Edit 
		//----------------------------------------------------------------------
	  	if ($_REQUEST['Action'] == "Edit") {
			$table='program';

			if ( array_key_exists('program_id', $_REQUEST)) {
				if ( isset ($_REQUEST['program_id'] ) ) {
					$program_id = stripslashes( $_REQUEST['program_id']);
				}else{
					die ("NO Program ID in edit function.") ;
				}
				if ( ! is_numeric($lid) ) {
					die ("Program ID ($program_id) is not an integer.") ;
				}
			}else{
				die ("No Program Id Set") ;
			}

			$dbh = kkk_pdo_connect();

			//
			// People Rosterselect 
			//
			$People = array();
			$PeopleEmail = array();
			$sql = "SELECT people_id, first_name, last_name, email_1 from people";
			// TODO: limit scope: $sql .= " WHERE ....";
			$result = $dbh->query($sql);
			while ($row = $result->fetch(PDO::FETCH_ASSOC)){
				$pid = $row['people_id'];
				$People[$pid] = $row['first_name'] . " " . $row['last_name'];
				$PeopleEmail[$pid] = $row['email_1'];
			}


			$menulist = array();

			$sql = "SELECT * FROM program WHERE program_id = '$program_id'";
			$result = $dbh->query($sql);
			$row = $result->fetch(PDO::FETCH_ASSOC);

			$fieldlabel = get_field_labels('program','program',$KKKCFG['DBNAME']);

			// Blurb
			echo "<P class=trace>\n";
			echo "Change desired entries and click <B>Update</B> at bottom of form.\n";
			echo "</P>\n";


			echo "<CENTER>\n";
			echo "<FORM ACTION=$_SERVER[PHP_SELF] TYPE=POST>\n";
			echo "<TABLE BORDER>\n";

			foreach ($ALLFIELD as $fieldname ) {
				$label = $fieldlabel[$fieldname];
				echo "<TR><TD VALIGN=TOP class=tdls>";
				echo "<A HREF=/help.phpx?source_table=program&field_name=$fieldname&Action=Help>";
				echo "$label";
				echo "</A>";
				echo "</TD>\n";
				echo "<TD VALIGN=TOP class=tds>";

				if (in_array($fieldname, $NoEdit)) {
					echo "$row[$fieldname]<BR>";
				}else{
					if (array_key_exists($fieldname, $FieldType)) {

						if ( $FieldType[$fieldname] == "Menu" ) {
							$menusql = $Menu[$fieldname];
							$menulist = get_menu($menusql);
							spew_select_menu($fieldname, $row[$fieldname],'',$menulist);
						}

						if ($FieldType[$fieldname] == "MenuArray" ) {
							$menusql = $Menu[$fieldname];
							$menulist = get_menu_array($menusql);
							spew_select_hash_menu($fieldname, $row[$fieldname],'',$menulist);
						}

						if ($FieldType[$fieldname] == "People" ) {
							spew_select_menu($fieldname, $_REQUEST[$fieldname],'',$People);
						}

						if ( $FieldType[$fieldname] == "TextArea" ) {
							echo "<TEXTAREA NAME=$fieldname COLS=70 ROWS=20>$row[$fieldname]</TEXTAREA>\n";
						}

						if ( $FieldType[$fieldname] == "LongText" ) {
							echo "<INPUT TYPE=TEXT NAME=$fieldname SIZE=70 VALUE=\"$row[$fieldname]\">\n";
						}

					}else{	// No fieldtype
						echo "<INPUT TYPE=TEXT NAME=$fieldname VALUE=\"$row[$fieldname]\"><BR>";
					}
						
				}//Endif NoEdit
				echo "</TD>\n";
			}//Endforeach fieldname
			echo "</TABLE>\n";
			echo "<INPUT TYPE=HIDDEN NAME=program_id VALUE=$_REQUEST[program_id]>\n";
			// SECURITY
			if ( $_SESSION['access'] >= $PROGRAMCFG['EDITLEVEL'] ) {
				echo "<INPUT TYPE=SUBMIT NAME=Action VALUE=Update>\n";
			}
			echo "</FORM>\n";
			echo "</CENTER>\n";

			show_journal_history($program_id, $program);

	  	}//if ($_REQUEST['Action'] == "Edit") 


		//----------------------------------------------------------------------
	  	// View
		//----------------------------------------------------------------------
	  	if ($_REQUEST['Action'] == "View"
	  		|| $_REQUEST['Action'] == "View Details" ) {

			$dbh = kkk_pdo_connect();

			$table = 'program';

			if ( array_key_exists('program_id', $_REQUEST)) {
				if ( isset ( $_REQUEST['program_id'] ) ) {
					$program_id = $_REQUEST['program_id'];
				}else{
					die ("No Program ID in view function") ;
				}
				if ( ! is_numeric($program_id) ) {
					die ("Program ID ($program_id) is not an integer.") ;
				}
			}else{
				die ("No Program Id Set") ;
			}
			$source_id = $program_id;


			$menulist = array();
			$row = array();

			$sql = "SELECT * FROM program WHERE program_id = '$program_id'";

			$result = $dbh->query($sql);
			$row = $result->fetch(PDO::FETCH_ASSOC);

			$fieldlabel = get_field_labels('program','program',$KKKCFG['DBNAME']);

			// Blurb
			echo "<P class=trace>\n";
			echo "Field explanation available via link in left column field labels.\n";
			echo "</P>\n";

			echo "<CENTER>\n";
			echo "<H2>$row[program_name]</H2>\n";
			echo "<FORM ACTION=$_SERVER[PHP_SELF] TYPE=POST>\n";
			echo "<TABLE BORDER>\n";

			foreach ($ALLFIELD as $fieldname ) {
				$label = $fieldlabel[$fieldname];
				echo "<TR>\n";
				echo "<TD class=tdls>";
				echo "<A HREF=/help.phpx?source_table=$table&field_name=$fieldname&Action=Help>";
				echo "$label</A></TD>\n";
				echo "<TD class=tds>";

				$display = stripslashes($row[$fieldname]);

				//
				// View Entry Lookup Map Translations (id -> othertable.name for foreign keys)
				//
				if ( $fieldname == "program_id" ) {
					$sql = "SELECT program_name from center where program_id = '$row[program_id]'";
					$display = get_value($sql);
				}

				echo "$display<BR>";
				echo "</TD>\n";
			}//Endforeach fieldname
			echo "</TABLE>\n";
			echo "<INPUT TYPE=SUBMIT NAME=Action VALUE=List>\n";
			echo "</FORM>\n";

			//
			// Show Journal History
			//
			echo "<FORM ACTION=/journal.phpx TYPE=POST>\n";
			echo "<INPUT TYPE=HIDDEN NAME=source_id VALUE=$_REQUEST[$tid]>\n";
			echo "<INPUT TYPE=HIDDEN NAME=source_table VALUE=$table>\n";
			if ( $_SESSION['access'] >= $PROGRAMCFG['EDITLEVEL'] ) {
				echo "<INPUT TYPE=SUBMIT NAME=Action VALUE=\"Edit\">\n";
			}
			echo "<INPUT TYPE=SUBMIT NAME=Action VALUE=\"Add Journal\">\n";
			echo "</FORM>\n";

			show_journal_history($pid, $table);

			echo "</CENTER>\n";
	  	}//if ($_REQUEST['Action'] == "View")

		//----------------------------------------------------------------------
		// END 'Action' Processing Options
		//----------------------------------------------------------------------

	}else{	// No Action Field
		spew_query_form();
	}

	spew_footer($FMT);
	//----------------------------------------------------------------
	// Function spew_query_form
	//----------------------------------------------------------------
	function spew_query_form() {
		global $KKKCFG;
        $list = array();
		$dbh = kkk_pdo_connect();

		echo "<P class=trace>";
		echo "Help and explanations available at ";
		echo "<A HREF=$KKKCFG[BASEURL]/help.phpx?source_table=program&field_name=Overview&Action=Help>Overview</A>.";
		echo "</P>\n";

		echo "<CENTER>\n";
		echo "<FORM ACTION=$_SERVER[PHP_SELF] TYPE=POST>\n";
		echo "<TABLE BORDER>\n";
		echo "<TH class=ths>Program Name</TH>\n";
		echo "<TH class=ths>Type</TH>\n";
		echo "<TH class=ths>Sort By</TH>\n";

		echo "<TR>\n";

		// Name
		echo "<TD class=tds>\n";
		$sql = "SELECT DISTINCT program_id, program_name from program order by program_name";
		$list = get_menu_array($sql);
		$list['All'] = 'All';
		spew_select_hash_menu('program_name','All','All',$list);
		echo "</TD>\n";

		// Type 
		echo "<TD class=tds>\n";
		$sql = "SELECT distinct program_type from  program order by program_type" ;
		$list = get_menu($sql);
		spew_select_menu('program_type','All','All',$list);
		echo "</TD>\n";

		// Sort By
		echo "<TD class=tds>\n";
		$sortby = array (
			'Program Name',
			'Type'
			);
		sort($sortby);
		spew_select_menu('Sortmeby','','Type',$sortby);
		echo "</TD>\n";

		// End Table

		echo "</TR>\n";
		echo "</TABLE>\n";

		// End Form
		echo "<INPUT TYPE=SUBMIT NAME=Action VALUE=List>\n";

		// SECURITY
		if ($_SESSION['access'] >= $PROGRAMCFG['EDITLEVEL'] ) {
			echo "<INPUT TYPE=SUBMIT NAME=Action VALUE=\"New\">\n";
		}
		echo "</FORM>\n";
		echo "</CENTER>\n";
	}

	//----------------------------------------------------------------
	// Function Show Journal History
	//----------------------------------------------------------------

	function show_journal_history ( $jid, $jtable ) {
		$dbh = kkk_pdo_connect();
		global $KKKCFG;

		$subname = "show_journal_history";

		echo "<P class=trace>Entering $subname in $program</P>\n" ; // DEBUG DEVONLY;
	
		$Default = array( 
			"journal_type"		=>	"Journal",
			"sortby"			=>	'Date Submitted'
			);
	
		$NoPropagate = array( 
			"sortby"	=>					"sort by",
			"thread"	=>					"thread"
			);
	
		//
		// Get List of nicknames for journal authors
		//
		$Who = array();
		$sql = "SELECT p.people_id, p.first_name, p.nickname, p.last_name, p.email_1 from people p, journal j";
		$sql .= " WHERE p.people_id = j.author_id ";
		$sql .= " AND j.source_table = '$jtable' AND j.source_id = '$jid' ";
		$Who = get_people_name_picklist($sql);

		//
		// Get List of emails for journal authors
		//
		$AuthorEmail = array();
		$sql = "SELECT p.people_id , p.email_1 from people p, journal j";
		$sql .= " WHERE p.people_id = j.author_id ";
		$sql .= " AND j.source_table = '$jtable' AND j.source_id = '$jid' ";
		$AuthorEmail = get_menu_array($sql);

		//
		// Get List of existing journal types
		//
		$sql = "SELECT distinct journal_type from journal";
		$jtypes =  get_menu($sql);

		//
		// Generate SQL query
		//
	
		$dbh = kkk_pdo_connect;
		$jfields =  get_fields('journal','journal',$KKKCFG['DBNAME']);
	
		$sql = "SELECT  ";
		$sql .= " j.journal_id, j.journal_access,  j.author_id, j.date_created, j.journal_type,";
		$sql .= " j.journal_summary, j.journal_detail"; 
		$sql .= " FROM journal j WHERE j.source_table = '$jtable' and j.source_id = '$jid' ";

		if (! isset($_SESSION['people_id'] ) ) {
			$sql .= " AND j.journal_access = 'Public' ";
			echo "<P class=trace>Following are all public entries. ";
			echo "Remaining entries visible after <A HREF=/login.phpx>logging in.</A></P>\n";
		}

		$sql .= " ORDER BY j.date_created desc";
		
		echo  "<P class=trace>$sql</P>\n" ; // DEBUG DEVONLY;

		//
		// Fetch and prepackage via sort/thread criteria WWWW
		//

		$TotalEntries = '0';
		$result = $dbh->query($sql);
		$rowcount = $result->rowCount();
		$Sort = array();
		$Journal = array();
		$Allauthors = array();
	
		//--------------------------------------------------------
		// Print Journal History
		//--------------------------------------------------------
		$url = $_SERVER['QUERY_STRING'];

		print "<P class=trace>Incoming URI: $url</P>\n"; // DEVONLY DEBUG

		if ( $_REQUEST[Journal] == "Detail" ) {
			$url = preg_replace('/=Detail/', '=Summary', $url);
			print "<P class=trace>Detail: url: ${url}</P>\n"; // DEVONLY DEBUG
			//print "<P class=trace><A HREF=\"$_SERVER[PHP_SELF]?$url\">Show Journal Summary Only</P>\n";
		}else{
			$url = preg_replace('/&Journal=Summary/', '', $url);
			print "<P class=trace>NO Detail: url: $url</P>\n"; // DEVONLY DEBUG
			//print "<P class=trace><A HREF=\"$_SERVER[PHP_SELF]?${url}&Journal=Detail\">Show Journal Details</P>\n";
		}

		$count = $result->rowCount();
		echo "<CENTER>\n";
		$howmany = "Entries";

		if ( $count == "1" ) {
			$howmany = "Entry";
		}

		echo "<TABLE id=${ctable}_journal_table BORDER CELLSPACING=2 CELLPADDING=4>\n";

		if ( $_REQUEST['Journal'] == "Detail" ) {
			echo "<TH class=ths>Details of $count Journal $howmany\n";
			echo "(Show <A HREF=\"$_SERVER[PHP_SELF]?$url\">summaries only</A>.)";
			echo "</TH>\n";
		}else{
			echo "<TH class=ths>Summary of $count Journal $howmany\n";
			echo "(Show <A HREF=\"$_SERVER[PHP_SELF]?${url}&Journal=Detail\">details</A>.)";
			echo "</TH>\n";
		}
		echo "<TR>\n";
		echo "<TD class=tds>\n";
		echo "<UL id=journallist>\n";


		while ($row = $result->fetch(PDO::FETCH_ASSOC)){

			$ts =  timestamp2display($Journal[date_created]);
			echo "<LI>";
			echo "<A HREF=\"/journal.phpx?journal_id=$Journal[journal_id]&Action=View\">";
			echo "<IMG SRC=/images/smallballs/greenball.gif HEIGHT=10 WIDTH=10 VALIGN=CENTER></A>\n";
			echo "&nbsp;[$ts]&nbsp;\n";
			$author_id = $Journal['author_id'];

			echo "<A HREF=\"mailto:$AuthorEmail[$author_id]\">$Who[$author_id]</A>:\n";

			echo "$Journal[journal_summary]\n";

			if ( $_REQUEST['Journal'] == "Detail" ) {
				echo "<UL id=journallistbody><LI>\n";
				echo "<PRE>\n";
				$cleantext = stripslashes($Journal[journal_detail]);
				$display = wordwrap($cleantext, 60, "\n");
				echo "$display";
				echo "</PRE>\n";
				echo "</LI></UL>\n";
			}

			echo "</LI>\n";
		}#Endwhile

		if (! $count) {
			echo "<LI>No journal entries</LI>\n";
		}
		echo "</UL>\n";
		echo "</TD>\n";
		echo "</TABLE>\n";
	
	}// End funtion show_journal_history
	//----------------------------------------------------------------
	// Function send_email_ack
	//----------------------------------------------------------------
	function send_email_ack ( array $Data ) {
		global $KKKCFG;
		//
		// Config parameters for email acknowledgement
		//
		$LOGINEMAIL = array (
			'subject'		=>	"$KKKCFG[COMPANY] Autobot", 
			'fromemail'		=>	"$KKKCFG[EMAIL]",
			'toemail'		=>	"$KKKCFG[EMAIL]",	// Safety, overwritten in send_email_ack
			'fromname'		=>	"$KKKCFG[COMPANY] Ops Admin" 
		);

		if ( $Data['email_1'] ) {
			$LOGINEMAIL['toemail'] = $Data['email_1'];
			echo "<CENTER>\n";
			echo "<H2>The info has been emailed to $Data[email_1]</H2>\n";
			echo "</CENTER>\n";
		}

		echo '<pre>';	//DEBUG DEVONLY
		echo "ENTERING EMAIL ACK<BR>\n";//DEBUG DEVONLY
		echo "LOGINEMAIL<BR>\n";//DEBUG DEVONLY
		echo htmlspecialchars(print_r($LOGINEMAIL), ENT_QUOTES);	//DEBUG DEVONLY
		echo "Incoming Data<BR>\n";//DEBUG DEVONLY
		echo htmlspecialchars(print_r($Data), ENT_QUOTES);	//DEBUG DEVONLY
		echo '</pre>';	//DEBUG DEVONLY

		$fd = popen($KKKCFG[MAILER],"w"); 
		//
		// Construct Mail Headers
		//
		fputs($fd, "From: $LOGINEMAIL[fromname] <$LOGINEMAIL[fromemail]>\n"); 
		fputs($fd, "To: $LOGINEMAIL[toname] <$LOGINEMAIL[toemail]>\n"); 

		if ( $Data[email_2] ) {
			fputs($fd, "Cc: $Data[email_2]\n"); 
			echo "<CENTER>\n";
			echo "<H2>A copy has also been sent to your alternate email $Data[email_2]</H2>\n";
			echo "</CENTER>\n";
		}
		//
		// Subject
		//
		fputs($fd, "Subject: $LOGINEMAIL[subject]\n\n"); 
		//
		// Body
		//
		fputs($fd, "Your issue has been resolved. Below is more information.\n\n"); 
		fputs($fd, "Click on the following link to log in and reset your password\n\n");
		fputs($fd, "$KKKCFG[BASEURL]\n\n");
		fputs($fd, "Do not reply to this email.\n");

		pclose($fd); 
	}//End function send_email_ack

	//----------------------------------------------------------------
	// END FUNCTIONS
	//----------------------------------------------------------------
		
?>
